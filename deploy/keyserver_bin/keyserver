#!/bin/bash
KS_HOME=`pwd`
UTL_HOME=$KS_HOME/utilities
PATH_CONF=$KS_HOME/conf/key.conf
#DB_SIZE=134217728
DB_SIZE=4294967296
PARTITION=32
UTL_DEBUG=false
DEBUG=true
KL_VERSION=19
KS_VERSION=117
CPUINFO=/proc/cpuinfo
KS_BIN=$KS_HOME/bin/keyserver
KG_BIN=$UTL_HOME/keygen/bin/main
MAP_BIN=$UTL_HOME/idmapper/mapper/bin/main
CHK_BIN=$UTL_HOME/idmapper/checker/bin/main
HOST=0.0.0.0
#HOST=localhost
LOG_HOME=$KS_HOME/logs
KS_LOG_PREFIX=$LOG_HOME/keyserver-
ID_LOG_PREFIX=$LOG_HOME/idmap-
CHK_LOG_PREFIX=$LOG_HOME/idcheck-
LOG_SUFFIX=.log
PORT_OFFSET=7000
PORT_OFFSET=16389
PATH_PID=`pwd`/PID

# keyserver malicious expire time
ID_EXP=10 #second
AES_EXP=72 #hour

BROKERS="<<BROKERS>>"
RATIO=80
REPORT=10

TPATH_CONF=$KS_HOME/conf/test.conf
TPORT_OFFSET=7000

#******
# starting binary checking
#******
binary_check(){
  echo "Stage 1/2: Begin binary checking..."
  _cat=`which cat`
  if [ ! -x $_cat ]; then 
    echo "cat not exists! ($_cat)"
    exit 1
  fi

  _wc=`which wc`
  if [ ! -x $_wc ]; then
    echo "wc not exists! ($_wc)"
    exit 1
  fi

  _rm=`which rm`
  if [ ! -x $_rm ]; then
    echo "rm not exists! ($_rm)"
    exit 1
  fi

  _grep=`which grep`
  if [ ! -x $_grep ]; then
    echo "grep not exists! ($_grep)"
    exit 1
  fi
  echo "Stage 1/2: Binary checking... done"
  echo "------"
}

#******
# starting config generation for keyserver
#******
config_check(){
  echo "Stage 2/3: Begin config checking..."
  KS_CONF=("PATH_KEYDB = $KS_HOME/data/keydb/aes/bkey.$DB_SIZE-$KL_VERSION"\
    "PATH_RSA = $KS_HOME/data/keydb/rsa/private.bin/private-"\
    "PATH_KEY_RELEASE = $KS_HOME/data/keydb/aes/release.aes"\
    "PATH_RSA_RELEASE = $KS_HOME/data/keydb/rsa/release.rsa"\
    "PATH_MAP = $KS_HOME/data/idmap/mapping-$DB_SIZE-"\
    "PATH_RMAP = $KS_HOME/data/idmap/rmapping-$DB_SIZE-"\
    "PATH_MALID = $KS_HOME/data/maldb/"\
    "KL_VERSION = $KL_VERSION"\
    "DB_SIZE = $DB_SIZE"\
    "PARTITION = $PARTITION"\
    "DEBUG = $DEBUG"\
    "UTL_DEBUG = $UTL_DEBUG"\
    )
  echo "Stage 2/3: Config checking... done"
  echo "------"
}

#******
# preparing environments and launch keyserver
#******
ks_start(){
  echo "Stage 2/2: Begin server starting..."
  TOTAL_CORES=$($_cat $CPUINFO|$_grep processor|$_wc -l)
  KS_CORES=$(($TOTAL_CORES/2))
  KS_CORES=1

  if [ -e $PATH_PID ]
  then
    pid
    PID=$(cat $PATH_PID)
    if [[ -z "$PID" ]]; then
      rm $PATH_PID
    else
      echo "keyserver is up, PID: $PID"
      exit 1
    fi
  fi
  $KS_BIN -conf $PATH_CONF -id_exp $ID_EXP -aes_exp $AES_EXP -brokers $BROKERS -ratio $RATIO -report $REPORT -log $LOG_HOME/keyserver.log &
  pid 
  echo "keyserver up... ($PID)"
  echo "Stage 2/2: Server starting... done"
}

pid(){
  PN=`pwd`/bin/keyserver
  PID=$(ps -ef | grep $PN | grep -v grep | head -n1 |  awk '{print $2;}')
  echo $PID > $PATH_PID
}

ks_stop(){
  PID=$(cat $PATH_PID)
  kill -9 $PID
  echo "keyserver ($PID) is stopped"
  rm $PATH_PID
}

case $1 in
  "start")
    binary_check
    ks_start
    ;;
  "stop")
    ks_stop
    ;;
  "restart")
    ks_stop
    binary_check
    ks_start
    ;;
  *)
    echo "Please input..."
    echo "\"$0 start\" for server launching..."
    echo "\"$0 stop\" for server stopping..."
    echo "\"$0 restart\" for server relaunching..."
#    echo "\"./keyserver 3\" for test server launching..."
esac

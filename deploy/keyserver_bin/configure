#!/bin/bash
KS_HOME=`pwd`
USR_NAME=droi
#WATCHLIST=/etc/supervisord.conf
#DATA_ROOT=$KS_HOME
DATA_ROOT=/ramfs
DATA_ROOT="<<@KEYSERVER_SSD_PATH>>"
UTL_HOME=$KS_HOME/util
PATH_CONF=$KS_HOME/conf/key.conf
DB_SIZE=4294967296
DB_SIZE=65536
DB_SIZE="<<@KEYSERVER_DB_SIZE>>"
PARTITION=32
UTL_DEBUG=false
DEBUG=false
TEST=false
#DEBUG=true
#TEST=true
TIMEOUT=5000
ASYNC=5
MAXGO=32
KL_VERSION=19
KS_VERSION=117
REKEY=1
REKEY_INTERVAL=30
MAX_RSA=1000
CPUINFO=/proc/cpuinfo
KS_BIN=$KS_HOME/bin/keyserver
KG_BIN=$UTL_HOME/keygen
MAP_BIN=$UTL_HOME/idmapper
CHK_BIN=$UTL_HOME/idchecker
FINDER_BIN=$UTL_HOME/ipfinder
#tannhauser
HOST="0.0.0.0"
#INTERNAL_IP="0.0.0.0"
INTERNAL_IP=$4
INTERNAL_IP="<<@KEYSERVER_INT_IP>>"
LOG_HOME=$KS_HOME/logs
KS_LOG_PREFIX=$LOG_HOME/keyserver-
ID_LOG_PREFIX=$LOG_HOME/idmap-
CHK_LOG_PREFIX=$LOG_HOME/idcheck-
PORT=6389
LOG_SUFFIX=.log
PORT_OFFSET=6389
KF_HOME=$DATA_ROOT/data/keydb/aes
MAP_HOME=$DATA_ROOT/data/idmap
DB_TYPE=1 #0: mongo, 1: redis

# keyserver malicious expire time
ID_EXP=10 #second
AES_EXP=72 #hour

# keyserver kfk config
BROKERS="10.128.112.78:9092,10.128.112.79:9092"
RATIO=70
REPORT=6

# for ./config conf
WATCHLIST=$2
BROKERS="<<@KEYSERVER_KFK_BROKERS>>"

#for ./config init
SEED=$2
RAN_ID=$3

# for ngx conf updater
ACC_HOME=$3
UPDATER=$UTL_HOME/updater
UPDATER_TARGET=$ACC_HOME/conf/nginx.conf
UPDATER_NGX=$ACC_HOME/sbin/nginx
AGENT_PORT=30973


MGO_HOME=$UTL_HOME/mongodb
MEM_HOME=$UTL_HOME/memcached
RED_HOME=$UTL_HOME/redis

DB_PATH=$MGO_HOME/data/db

MGO_NAME=mongod
MEM_NAME=memcached
RED_NAME=redis-server
MCUS_NAME=mcus
MCMAL_NAME=mcmal

MGO_BIN=bin/mongod
MEM_BIN=bin/memcached
MCUS_BIN=bin/mcus
MCMAL_BIN=bin/mcmal
RED_BIN=src/redis-server

MGO_PATH=$MGO_HOME/$MGO_BIN
MEM_PATH=$MEM_HOME/$MEM_BIN
MCUS_PATH=$MEM_HOME/$MCUS_BIN
MCMAL_PATH=$MEM_HOME/$MCMAL_BIN
RED_PATH=$RED_HOME/$RED_BIN

MC_PORT=22122

MC_UNIX_SOCKET=$DATA_ROOT/data/socket.mc

#******
# starting binary checking
#******
binary_check(){
  echo "Stage 1: Begin binary checking..."
  _cat=`which cat`
  if [ ! -x $_cat ]; then 
    echo "cat not exists! ($_cat)"
    exit 1
  fi

  _wc=`which wc`
  if [ ! -x $_wc ]; then
    echo "wc not exists! ($_wc)"
    exit 1
  fi

  _grep=`which grep`
  if [ ! -x $_grep ]; then
    echo "grep not exists! ($_grep)"
    exit 1
  fi

  _awk=`which awk`
  if [ ! -x $_awk ]; then
    echo "awk not exists! ($_awk)"
    exit 1
  fi

  _sed=`which sed`
  if [ ! -x $_sed ]; then
    echo "sed not exists! ($_sed)"
    exit 1
  fi

  echo "Stage 1: Binary checking... done"
  echo "------"
}

#******
# run supervisord
#******
super_run() {
  supervisord -c $WATCHLIST
}

#******
# modifying supervisord conf
#******
super_mod() {
  mkdir -p $MEM_HOME/logs
  echo "$MEM_PATH -u $USR_NAME -p $MC_PORT" | sudo tee -a $WATCHLIST
  
  MCMAL_PORT=$((MC_PORT + 1))
  echo "$MCMAL_PATH -u $USR_NAME -p $MCMAL_PORT" | sudo tee -a $WATCHLIST
  
  echo "$KS_BIN -conf $PATH_CONF -id_exp $ID_EXP -aes_exp $AES_EXP -brokers $BROKERS -ratio $RATIO -report $REPORT -log $LOG_HOME/keyserver.log" | sudo tee -a $WATCHLIST

  UPDATE_PORT=$(( $AGENT_PORT + 1))
  echo "$UPDATER -port=$UPDATE_PORT -ks_version=$KS_VERSION -nginx=$UPDATER_NGX -target=$UPDATER_TARGET -host=$INTERNAL_IP -brokers=$BROKERS -log $LOG_HOME/updater.log" | sudo tee -a $WATCHLIST

}

#******
# starting config generation for keyserver
#******
config_gen(){
  echo "Stage 2: Begin config generating..."
  mkdir -p $KS_HOME/bin
  mkdir -p $KS_HOME/conf
  mkdir -p $DATA_ROOT/data/maldb/id
  mkdir -p $DATA_ROOT/data/maldb/dup
  mkdir -p $LOG_HOME
  mkdir -p $KS_HOME/logs
  #INTERNAL_IP=$($FINDER_BIN -internal|$_awk '{print $2;}')
  TOTAL_CORES=$($_cat $CPUINFO|$_grep processor|$_wc -l)
  MAXGO=$(($TOTAL_CORES*4))
  KS_CONF=("KEY = $KF_HOME/bkey.$DB_SIZE"\
    "RSA = $KS_HOME/data/keydb/rsa/private.bin/private-"\
    "ID_MAP = $MAP_HOME/mapping-$DB_SIZE-"\
    "R_MAP = $MAP_HOME/rmapping-$DB_SIZE-"\
    "K_RELEASE = $KF_HOME/release.aes"\
    "R_RELEASE = $KS_HOME/data/keydb/rsa/release.rsa"\
    "TSDB = 127.0.0.1"\
    "TIMEOUT = $TIMEOUT"\
    "DEBUG = $DEBUG"\
    "UTL_DEBUG = $UTL_DEBUG"\
    "TEST = $TEST"\
    "ASYNC = $ASYNC"\
    "MAXGO = $MAXGO"\
    "KL_VERSION = $KL_VERSION"\
    "DB_SIZE = $DB_SIZE"\
    "PARTITION = $PARTITION"\
    "REKEY = $REKEY"\
    "REKEY_INTERVAL = $REKEY_INTERVAL"\
    "MAX_RSA = $MAX_RSA"\
    "MAL_INTERVAL = 3600"\
    "NEW_ID_THD = 10"\
    "HOST = $HOST"\
    "INTERNAL_IP = $INTERNAL_IP"\
    "PORT = $PORT"\
    "AGENT_PORT = $AGENT_PORT"\
    "KS_VERSION = $KS_VERSION"\
    "WINDOW = 10"\
    "MC_PORT = $MC_PORT"\
    "MC_US = $MC_UNIX_SOCKET"
    "REDIS = 127.0.0.1:9999"\
    "REDIS_POOL = 20"\
    "DB = $DB_TYPE"\
    "LOG_LEVEL = 8 #debug: 128, error: 64, crit: 32, info: 16, config: 8, track: 4, none: 0"\
    )
  rm $PATH_CONF
  for (( i = 0; i < ${#KS_CONF[@]}; i++ )); do
    echo ${KS_CONF[$i]} >> $PATH_CONF
  done

  # modify supervisord conf...
  super_mod

  echo "Stage 2: Config generating... done"
  echo "------"
}

#******
# starting key generation
#******
keygen(){
  echo "Stage 3: Begin AES key generating..."
  mkdir -p $DATA_ROOT/data/keydb/aes
  mkdir -p $DATA_ROOT/data/keydb/rsa
  $KG_BIN -dir=$KF_HOME -size=$DB_SIZE -version=$KL_VERSION -seed=$SEED
  cp -r $KS_HOME/data/keydb/rsa/private.bin $DATA_ROOT/data/keydb/rsa/
  echo "Stage 3: AES key generating... done"
  echo "------"
}

#******
# id mapping
#******
idmap(){
  echo "Stage 4: Begin ID mapping..."
  mkdir -p $DATA_ROOT/data/idmap
  for i in `seq 1 $PARTITION`;
  do
    ID_LOG="$ID_LOG_PREFIX$i$LOG_SUFFIX"
    #echo "$MAP_BIN $PATH_CONF $i > $ID_LOG"
    $MAP_BIN -dir=$MAP_HOME -size=$DB_SIZE -part=$PARTITION -this=$i -version=$KL_VERSION -random=$RAN_ID -seed=$SEED > $ID_LOG 2>&1
    #echo "$MAP_BIN -dir=$MAP_HOME -size=$DB_SIZE -part=$PARTITION -this=$i -version=$KL_VERSION -random=$RAN_ID"
    echo "$i/$PARTITION finished"
  done
  echo "Stage 4: ID mapping... done"
  echo "------"
}

#******
# id map checking
#******
idcheck(){
  echo "Stage 5: Begin ID checking..."
  for i in `seq 1 $PARTITION`;
  do
    CHK_LOG="$CHK_LOG_PREFIX$i$LOG_SUFFIX"
    #echo "$CHK_BIN $PATH_CONF $i > $CHK_LOG"
    $CHK_BIN -dir=$MAP_HOME -size=$DB_SIZE -part=$PARTITION -this=$i -version=$KL_VERSION > $CHK_LOG
    if [ -s $CHK_LOG ]; then
      echo "Error During ID Mapping"
      exit 1
    fi
    echo "$i/$PARTITION finished"
  done
  echo "Stage 5: ID checking... done"
  echo "------"
}

case $1 in
  "init")
    binary_check
    keygen
    idmap
    idcheck
    ;;
  "conf")
    binary_check
    config_gen
    ;;
  "keygen")
    binary_check
    keygen
    ;;
  "id")
    binary_check
    idmap
    idcheck
    ;;
  "run")
    super_run
    ;;
  *)
    echo "Usage: $0 [init|conf|run]"
    echo "init: initialize key database"
    echo "conf: configuration generation"
    echo "run: run supervisord"
    ;;
esac


